#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX_TOKEN_LENGTH 100

// Function to check if a string is a keyword
int isKeyword(char *token) {
    char keywords[][10] = {"auto", "break", "case", "char", "const", "continue", "default",
                           "do", "double", "else", "enum", "extern", "float", "for",
                           "goto", "if", "int", "long", "register", "return", "short",
                           "signed", "sizeof", "static", "struct", "switch", "typedef",
                           "union", "unsigned", "void", "volatile", "while"};

    int i, flag = 0;

    for (i = 0; i < sizeof(keywords) / sizeof(keywords[0]); i++) {
        if (strcmp(token, keywords[i]) == 0) {
            flag = 1;
            break;
        }
    }

    return flag;
}

// Function to check if a string is a valid identifier
int isValidIdentifier(char *token) {
    if (!isalpha(token[0]) && token[0] != '_')
        return 0;

    for (int i = 1; i < strlen(token); i++) {
        if (!isalnum(token[i]) && token[i] != '_')
            return 0;
    }

    return 1;
}

// Function to check if a string is a valid constant
int isValidConstant(char *token) {
    int i = 0;

    // Check for integer constants
    if (isdigit(token[0])) {
        while (isdigit(token[i]))
            i++;
    }

    // Check for floating-point constants
    if (token[i] == '.') {
        i++;
        while (isdigit(token[i]))
            i++;
    }

    // Check for character constants
    if (token[i] == '\'' && (token[i + 2] == '\'' || (token[i + 3] == '\'' && token[i + 1] == '\\')))
        i += 3;

    return (i == strlen(token));
}

int main() {
    char filename[50];
    printf("Enter the file name: ");
    scanf("%s", filename);

    FILE *fp = fopen(filename, "r");

    if (fp == NULL) {
        perror("Error opening file");
        return 1;
    }

    char token[MAX_TOKEN_LENGTH];

    while (fscanf(fp, "%s", token) != EOF) {
        if (isKeyword(token)) {
            printf("Keyword: %s\n", token);
        } else if (isValidIdentifier(token)) {
            printf("Identifier: %s\n", token);
        } else if (isValidConstant(token)) {
            printf("Constant: %s\n", token);
        }
    }

    fclose(fp);

    return 0;
}
