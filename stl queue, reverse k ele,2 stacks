#include <bits/stdc++.h> 
using namespace std; 

struct Queue { 
	stack<int> stack1, stack2; 

	void enqueue(int x) 
	{ 
		// Move all elements from s1 to s2 
		while (!stack1.empty()) { 
			stack2.push(stack1.top()); 
			stack1.pop(); 
		} 

		// Push item into s1 
		stack1.push(x); 

		// Push everything back to s1 
		while (!stack2.empty()) { 
			stack1.push(stack2.top()); 
			stack2.pop(); 
		} 
	} 

	// Dequeue an item from the queue 
	int dequeue() 
	{ 
		// if first stack is empty 
		if (stack1.empty()) { 
			cout << "queue is Empty"; 
			exit(0); 
		} 

		// Return the top of stack1 
		int x = stack1.top(); 
		stack1.pop(); 
		return x; 
	} 
}; 

int main() 
{ 
	Queue q; 
	q.enqueue(3); 
	q.enqueue(4); 
	q.enqueue(5); 

	cout << q.dequeue() << endl; 
	cout << q.dequeue() << endl; 
	cout << q.dequeue() << endl; 

	return 0; 
}












#include <stdio.h>
#define max 10
struct stack
{
    int a[20];
    int top;
};
typedef struct stack * sp;
void push(sp s,int x)
{
    if(s->top==max-1)
    {
        printf("stack is full");
    }
    else
    {
        (s->top)++;
        s->a[s->top]=x;
    }

}
int pop(sp s)
{    int x;
    if(s->top==-1)
    {
        printf("stack is empty");
        return -1;
    }
    else
    {
    x=s->a[s->top];
    (s->top)--;
    return x;
    }
}
void display(struct stack s)
{
    int i;
    for(i=s.top;i>=0;i--)
    printf("   %d",s.a[i]);
}
int main() 
{
    struct stack s1,s2,s3;
    int i,k;
    s1.top=s2.top=s3.top=-1;
    for(i=1;i<=10;i++)
    push(&s1,i);
    display(s1);
    printf("\nenter k value");
    scanf("%d",&k);
    for(i=0;i<k;i++)
    { 
      push(&s2,pop(&s1));
    }
    while(s2.top!=-1)
    {
        push(&s3,pop(&s2));
    }
    while(s3.top!=-1)
    {
        push(&s1,pop(&s3));
    }
    display(s1);
    return 0;
}









#include <stdio.h>
#define max 10
struct stack
{
    int a[20];
    int top1,top2;
};
typedef struct stack * sp;
void push1(sp s,int x)
{
    if(s->top1==s->top2-1)
    {
        printf("stack is full");
    }
    else
    {
        (s->top1)++;
        s->a[s->top1]=x;
    }

}
void push2(sp s,int x)
{
    if(s->top1==s->top2-1)
    {
        printf("stack is full");
    }
    else
    {
    	(s->top2)--;
        s->a[s->top2]=x;
        
    }

}

int pop1(sp s)
{    int x;
    if(s->top1==-1)
    {
        printf("stack is empty");
        return -1;
    }
    else
    {
    x=s->a[s->top1];
    (s->top1)--;
    return x;
    }
}
int pop2(sp s)
{    int x;
    if(s->top2==max)
    {
        printf("stack is empty");
        return -1;
    }
    else
    {
    	(s->top1)++;
        s->a[s->top1]=x;
    
    return x;
    }
}
void display1(struct stack s)
{
    int i;
    
    for(i=s.top1;i>=0;i--)
    printf(" %d",s.a[i]);

}

void display2(struct stack s)
{
    int i;
    
    for(i=s.top2;i<max;i++)
    printf("%d",s.a[i]);
}
int main() 
{
    struct stack s;
    int x,ch;
    s.top1=-1;
	s.top2=max;
    push1(&s,20);
    push1(&s,30);
    push1(&s,70);
    push2(&s,22);
    push2(&s,50);
    push2(&s,40);
    display1(s);
    display2(s);
    printf("the popped elem in s1 \n%d",pop1(&s));
    printf("the popped elem in s2 \n%d",pop2(&s));
    display1(s);
    display2(s);
	return 0;
    
}
